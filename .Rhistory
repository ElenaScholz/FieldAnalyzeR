return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE),
n = n())
return(daily_temperature_ds = daily_temperature_ds)
}
}
input_file <- "~/Documents/R-FinalExam/packagetest/spatialdata/logger_geodata.csv"
name_temperature_column ="X1.oC"
data_tests <- aggregate_data(input_file, name_temperature_column)
data_tests
View(data_tests)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE),
n = n())
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE),
n = n(mean_temperature))
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
72/24
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE)) %>%
summarise(n = n)
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE)) %>%
summarise(n = n())
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE),
n = n())
return(daily_temperature_ds = daily_temperature_ds)
}
}
input_file <- "~/Documents/R-FinalExam/packagetest/spatialdata/logger_geodata.csv"
name_temperature_column ="X1.oC"
data_tests <- aggregate_data(input_file, name_temperature_column)
head(data_tests)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# Calculate count of temperature observations per day
n_count <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(n = n())
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
head(data_tests)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE)) %>%
summarise(n = n())
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
View(data_tests)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# number of observations
# daily_temperature_ds$n <-
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
count(data_tests$mean_temperature)
n(data_tests$mean_temperature)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# Calculate count of temperature observations per day
n_count <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(n = n())
# Merge the count with other summary statistics
daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
return(daily_temperature_ds = daily_temperature_ds)
}
}
input_file <- "~/Documents/R-FinalExam/packagetest/spatialdata/logger_geodata.csv"
name_temperature_column ="X1.oC"
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# Calculate count of temperature observations per day
n_count <- daily_temperature_ds %>%
group_by(Logger.ID, Date, mean_temperature) %>%
summarise(n = n())
# Merge the count with other summary statistics
daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# Calculate count of temperature observations per day
n_count <- daily_temperature_ds %>%
group_by(Logger.ID, Date, name_temperature_column) %>%
summarise(n = n())
# Merge the count with other summary statistics
daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# Calculate count of temperature observations per day
n_count <- extracted_dates %>%
group_by(Logger.ID, Date, name_temperature_column) %>%
summarise(n = n())
# Merge the count with other summary statistics
daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
return(daily_temperature_ds = daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
aggregate_data <- function(input_file, name_temperature_column, daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c('Logger.ID', 'Date', "Time", name_temperature_column)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(Logger.ID, Date) %>%
summarise(mean_temperature = mean(!!sym(name_temperature_column), na.rm = TRUE),
std_temperature = sd(!!sym(name_temperature_column), na.rm = TRUE),
T_min = min(!!sym(name_temperature_column), na.rm = TRUE),
T_max = max(!!sym(name_temperature_column), na.rm = TRUE))
# Calculate count of temperature observations per day
n_count <- extracted_dates %>%
group_by(Logger.ID, Date, Time) %>%
summarise(n = n())
# Merge the count with other summary statistics
daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
}
}
data_tests <- aggregate_data(input_file, name_temperature_column)
head(data_tests)
column_names = list(id = 'Logger.ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "X1.oC")
column_names$id
aggregate_data <- function(input_file, column_names = list(id = 'ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "temp"), daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c(column_names$id, column_names$date, column_names$year, column_names$month, column_names$dtime, column_names$temperature)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(column_names$id, column_names$date) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
# it is not possible yet to extract the number of observations!
# # Calculate count of temperature observations per day
# n_count <- extracted_dates %>%
#   group_by(Logger.ID, Date, Time) %>%
#   summarise(n = n())
# Merge the count with other summary statistics
# daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
}
}
column_names = list(id = 'Logger.ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "X1.oC")
input_file <- "~/Documents/R-FinalExam/packagetest/spatialdata/logger_geodata.csv"
data_tests <- aggregate_data(input_file, column_names)
library(utils)
library(lubridate)
library(dplyr)
data_tests <- aggregate_data(input_file, column_names)
data_tests
View(data_tests)
aggregate_data <- function(input_file, column_names = list(id = 'ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "temp"), daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, column_names$id, column_names$date, column_names$year, column_names$month, column_names$dtime, column_names$temperature]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(column_names$id, column_names$date) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
# it is not possible yet to extract the number of observations!
# # Calculate count of temperature observations per day
# n_count <- extracted_dates %>%
#   group_by(Logger.ID, Date, Time) %>%
#   summarise(n = n())
# Merge the count with other summary statistics
# daily_temperature_ds <- merge(daily_temperature_ds, n_count, by = c("Logger.ID", "Date"), all.x = TRUE)
}
}
data_tests <- aggregate_data(input_file, column_names)
aggregate_data <- function(input_file, column_names = list(id = 'ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "temp"), daily = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
extracted_dates <- ds[, c(column_names$id, column_names$date, column_names$year, column_names$month, column_names$time, column_names$temperature)]
if (daily){
# create an empty dataframe for the daily data
daily_temperature_ds <- extracted_dates %>%
group_by(!!sym(column_names$id), !!sym(column_names$date)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
return(daily_temperature_ds)
}
}
data_tests <- aggregate_data(input_file, column_names)
View(data_tests)
library(rlang)
aggregate_data <- function(input_file, column_names = list(id = 'ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "temp"), daily = TRUE, monthly = TRUE, annual = TRUE, seasonal = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
subset_ds <- ds[, c(column_names$id, column_names$date, column_names$year, column_names$month, column_names$time, column_names$temperature)]
if (daily){
daily_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$date)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
if (monthly){
monthly_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$month)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
# Create a new column for the season
extracted_dates <- extracted_dates %>%
mutate(season = month_to_season(column_names$month))
if (seasonal){
seasonal_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), season) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
if (annual){
annual_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$year)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
return(list(daily_temperature_data = daily_temperature_data, monthly_temperature_data = monthly_temperature_data, annual_temperature_data = annual_temperature_data))
}
aggregate_data <- function(input_file, column_names = list(id = 'ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "temp"), daily = TRUE, monthly = TRUE, annual = TRUE, seasonal = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
subset_ds <- ds[, c(column_names$id, column_names$date, column_names$year, column_names$month, column_names$time, column_names$temperature)]
if (daily){
daily_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$date)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
if (monthly){
monthly_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$month)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
# Create a new column for the season
extracted_dates <- extracted_dates %>%
mutate(season = month_to_season(column_names$month))
if (seasonal){
seasonal_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), season) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
if (annual){
annual_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$year)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
return(list(daily_temperature_data = daily_temperature_data, monthly_temperature_data = monthly_temperature_data, seasonal_temperature_data = seasonal_temperature_data, annual_temperature_data = annual_temperature_data))
}
column_names = list(id = 'Logger.ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "X1.oC")
input_file <- "~/Documents/R-FinalExam/packagetest/spatialdata/logger_geodata.csv"
data_tests <- aggregate_data(input_file, column_names)
aggregate_data <- function(input_file, column_names = list(id = 'ID', date = "Date" , year = "Year", month = "Month", time = "Time", temperature = "temp"), daily = TRUE, monthly = TRUE, annual = TRUE, seasonal = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(input_file)
ds <- check_format(input_file)
subset_ds <- ds[, c(column_names$id, column_names$date, column_names$year, column_names$month, column_names$time, column_names$temperature)]
if (daily){
daily_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$date)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
if (monthly){
monthly_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$month)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
# Create a new column for the season
subset_ds <- subset_ds %>%
mutate(season = month_to_season(column_names$month))
if (seasonal){
seasonal_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), season) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
if (annual){
annual_temperature_data <- subset_ds %>%
group_by(!!sym(column_names$id), !!sym(column_names$year)) %>%
summarise(mean_temperature = mean(!!sym(column_names$temperature), na.rm = TRUE),
std_temperature = sd(!!sym(column_names$temperature), na.rm = TRUE),
T_min = min(!!sym(column_names$temperature), na.rm = TRUE),
T_max = max(!!sym(column_names$temperature), na.rm = TRUE))
}
return(list(daily_temperature_data = daily_temperature_data, monthly_temperature_data = monthly_temperature_data, seasonal_temperature_data = seasonal_temperature_data, annual_temperature_data = annual_temperature_data))
}
data_tests <- aggregate_data(input_file, column_names)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
