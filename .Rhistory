if (aggregation_type == "daily"){
daily_temperature <- df %>%
group_by(Date) %>%
summarise(mean_temperature = mean(Temperature_C),
std_temperature = sd(Temperature_C),
min_temperature = min(Temperature_C),
max_temperature = max(Temperature_C)) %>%
mutate(Julian=yday(Date))
}
else if (aggregation_type == "monthly"){
monthly_temperature <- df %>%
group_by(Month, Year) %>%
summarise(mean_temperature = mean(Temperature_C),
std_temperature = sd(Temperature_C),
min_temperature = min(Temperature_C),
max_temperature = max(Temperature_C))
}
}
daily_temperature <- aggregate(logger1, aggregation_type = "daily")
# Plot: Plots mean Temperature for each month between 2010 and 2020
a <- ggplot(daily_temperature, aes(Year, max_temperature, colour = Month)) +
geom_point(size = 0.5) +
geom_smooth(method = "loess") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
legend.position = "none") +
scale_color_manual(values = my_colour) +
labs(title = "Monthly mean maximum temperature", subtitle = "Muragl Logger data", y = "Degrees Celsius") +
facet_wrap(~Month) +
NULL
b <- ggplot(monthly_temperature, aes(Year, min_temperature, colour = Month)) +
geom_point(size = 0.5) +
geom_smooth(method = "loess") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
legend.position = "none") +
scale_color_manual(values = my_colour) +
labs(title = "Monthly mean minimum temperature", subtitle = "Muragl Logger data", y = "Degrees Celsius") +
facet_wrap(~Month) +
NULL
plot_grid(a, b)
aggregate <- function(df, aggregation_type){
if (aggregation_type == "daily"){
daily_temperature <- df %>%
group_by(Date) %>%
summarise(mean_temperature = mean(Temperature_C),
std_temperature = sd(Temperature_C),
min_temperature = min(Temperature_C),
max_temperature = max(Temperature_C)) %>%
mutate(Julian=yday(Date),
Year = year(Date),
Month = month(Date),
Day = day(Date))
}
else if (aggregation_type == "monthly"){
monthly_temperature <- df %>%
group_by(Month, Year) %>%
summarise(mean_temperature = mean(Temperature_C),
std_temperature = sd(Temperature_C),
min_temperature = min(Temperature_C),
max_temperature = max(Temperature_C))
}
}
daily_temperature <- aggregate(logger1, aggregation_type = "daily")
# Plot: Plots mean Temperature for each month between 2010 and 2020
a <- ggplot(daily_temperature, aes(Year, max_temperature, colour = Month)) +
geom_point(size = 0.5) +
geom_smooth(method = "loess") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
legend.position = "none") +
scale_color_manual(values = my_colour) +
labs(title = "Monthly mean maximum temperature", subtitle = "Muragl Logger data", y = "Degrees Celsius") +
facet_wrap(~Month) +
NULL
b <- ggplot(monthly_temperature, aes(Year, min_temperature, colour = Month)) +
geom_point(size = 0.5) +
geom_smooth(method = "loess") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
legend.position = "none") +
scale_color_manual(values = my_colour) +
labs(title = "Monthly mean minimum temperature", subtitle = "Muragl Logger data", y = "Degrees Celsius") +
facet_wrap(~Month) +
NULL
plot_grid(a, b)
daily_plot <- ggplot(daily_temperature, aes(Month, mean_temperature))+
geom_line()+
facet_wrap(~Year)
daily_plot <- ggplot(daily_temperature, aes(Month, mean_temperature))+
geom_line()+
facet_wrap(~Year)+
NULL
daily_plot
daily_plot <- ggplot(daily_temperature, aes(Julian, mean_temperature))+
geom_line()+
facet_wrap(~Year)+
NULL
daily_plot
daily_plot <- ggplot(daily_temperature, aes(Date, mean_temperature))+
geom_line()+
facet_wrap(~Year)+
NULL
daily_plot
daily_plot <- ggplot(daily_temperature, aes(Julian, mean_temperature))+
geom_line()+
facet_wrap(~Year)+
NULL
daily_plot
daily_plot <- ggplot(daily_temperature, aes(Year, mean_temperature))+
geom_line()+
facet_wrap(~Month)+
NULL
daily_plot
gc()
devtools::document()
devtools::document()
usethis::use_package("readxl")
usethis::use_package("tools")
usethis::use_package("utils")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
rearrange_dataset <- function( column_organization = list(No = Number, Time = Time, X1.oC = Temperature_C, HK.Bat.V = Battery_Voltage)){
print(column_organization[No])
}
test <- rearrange_dataset()
rearrange_dataset <- function( column_organization = list(No = 'Number', Time = 'Time', X1.oC = 'Temperature_C', HK.Bat.V = 'Battery_Voltage')){
print(column_organization[No])
}
test <- rearrange_dataset()
rearrange_dataset <- function( column_organization = list('No' = 'Number', 'Time '= 'Time', 'X1.oC' = 'Temperature_C', 'HK.Bat.V' = 'Battery_Voltage')){
print(column_organization[No])
}
test <- rearrange_dataset()
rearrange_dataset <- function( column_organization = list('No' = 'Number', 'Time '= 'Time', 'X1.oC' = 'Temperature_C', 'HK.Bat.V' = 'Battery_Voltage')){
print(column_organization(No))
}
test <- rearrange_dataset()
rearrange_dataset <- function( column_organization = list('No' = 'Number', 'Time '= 'Time', 'X1.oC' = 'Temperature_C', 'HK.Bat.V' = 'Battery_Voltage')){
print(column_organization(No))
}
test <- rearrange_dataset(column_organization = list('No' = 'Number', 'Time '= 'Time', 'X1.oC' = 'Temperature_C', 'HK.Bat.V' = 'Battery_Voltage'))
rearrange_dataset <- function(df){
logger_df <- df %>%
dplyr::rename(Number =  No,
Logger_ID = Logger_ID,
Time = Time,
Temperature_C = X1.oC,
Battery_Voltage = HK.Bat.V)
}
list_df <- read_data(input_directory = "/home/ela/Documents/R-FinalExam/Muragl/")
logger1 <- list_df$A50276_20231006143640.csv
rearrange_dataset(logger1)
View(logger1)
rearrange_dataset <- function(df){
logger_df <- df %>%
dplyr::rename(Number =  No,
Logger_ID = Logger_ID,
Time = Time,
Temperature_C = X1.oC,
Battery_Voltage = HK.Bat.V) %>%
dplyr::mutate(Time = as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S")) %>%
dplyr::mutate(Date = as.Date(Time)) %>% # Extracting only the date component
dplyr::mutate(Julian = yday(Time)) %>%
dplyr::mutate(Month = factor(month.name[as.integer(format(Time, "%m"))], levels = month.name)) %>%
dplyr::mutate(Year = year(Time))
return(logger_df)
}
rearrange_dataset(logger1)
logger1 <- rearrange_dataset(logger1)
View(logger1)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
all_logger <- read_data(input_directory = "/home/ela/Documents/R-FinalExam/Muragl/")
logger_df <- all_logger$A50276_20231006143640.csv
logger_df <- rename_columns(logger_df)
devtools::check()
devtools::check()
modify_dates <- function(df, mutate_options = list()){
dates_df <- df
if (length(mutate_operations) > 0) {
for (operation in mutate_operations) {
dates_df <- dplyr::mutate(dates_df, !!!operation)
}
}
return(dates_df)
}
all_logger <- read_data(input_directory = "/home/ela/Documents/R-FinalExam/Muragl/")
logger_df <- all_logger$A50276_20231006143640.csv
rename_columns(logger_df)
logger_df <- rename_columns(logger_df)
View(logger_df)
logger_df <- modify_dates(logger_df, mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
))
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
logger_df <- modify_dates(logger_df, mutate_options = mutate_operations)
modify_dates <- function(df, mutate_options = list()){
dates_df <- df
if (length(mutate_operations) > 0) {
for (operation in mutate_operations) {
dates_df <- dplyr::mutate(dates_df, !!operation)
}
}
return(dates_df)
}
logger_df <- modify_dates(logger_df, mutate_options = mutate_operations)
modify_dates <- function(df, mutate_options = list()){
dates_df <- df
if (length(mutate_options) > 0) {
for (operation in mutate_options) {
dates_df <- dplyr::mutate(dates_df, !!operation)
}
}
return(dates_df)
}
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
logger_df <- modify_dates(logger_df, mutate_options = mutate_operations)
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
logger_df <- mutate_columns(logger_df, mutate_operations)
# Function to perform mutation operations
mutate_columns <- function(df, mutate_operations) {
mutated_df <- df
if (length(mutate_operations) > 0) {
for (operation in mutate_operations) {
mutated_df <- dplyr::mutate(mutated_df, !!!operation)
}
}
return(mutated_df)
}
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
logger_df <- mutate_columns(logger_df, mutate_operations)
mutate_operations <- list(
Time = as.POSIXct(logger_df$Time, format = "%d.%m.%Y %H:%M:%S"),
Date = as.Date(logger_df$Time),
Julian = lubridate::yday(logger_df$Time),
Month = factor(month.name[as.integer(format(logger_df$Time, "%m"))], levels = month.name),
Year = lubridate::year(logger_df$Time)
)
logger_df <- mutate_columns(logger_df, mutate_operations)
View(logger_df)
# Function to perform mutation operations
#
#doesn't work
mutate_columns <- function(df, mutate_operations) {
mutated_df <- df
if (length(mutate_operations) > 0) {
for (operation in mutate_operations) {
mutated_df <- dplyr::mutate(mutated_df, !!operation)
}
}
return(mutated_df)
}
all_logger <- read_data(input_directory = "/home/ela/Documents/R-FinalExam/Muragl/")
logger_df <- all_logger$A50276_20231006143640.csv
logger_df <- rename_columns(logger_df)
mutate_operations <- list(
Time = as.POSIXct(logger_df$Time, format = "%d.%m.%Y %H:%M:%S"),
Date = as.Date(logger_df$Time),
Julian = lubridate::yday(logger_df$Time),
Month = factor(month.name[as.integer(format(logger_df$Time, "%m"))], levels = month.name),
Year = lubridate::year(logger_df$Time)
)
str(logger_df$Time)
# Function to perform mutation operations
#
#doesn't work
mutate_columns <- function(df) {
mutated_df <- df%>%
mutate(Time = as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S")) %>%
mutate(Date = as.Date(Time)) %>% # Extracting only the date component
mutate(Julian = yday(Time)) %>%
mutate(Month = factor(month.name[as.integer(format(Time, "%m"))], levels = month.name)) %>%
mutate(Year = year(Time))
}
logger_df <- mutate_columns(logger_df)
# Function to perform mutation operations
#
#doesn't work
mutate_columns <- function(df) {
mutated_df <- df%>%
dplyr::mutate(Time = as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S")) %>%
dplyr::mutate(Date = as.Date(Time)) %>% # Extracting only the date component
dplyr::mutate(Julian = lubridate::yday(Time)) %>%
dplyr::mutate(Month = factor(month.name[as.integer(format(Time, "%m"))], levels = month.name)) %>%
dplyr::mutate(Year = lubridate::year(Time))
}
logger_df <- mutate_columns(logger_df)
View(logger_df)
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
for (operation in mutate_operations){}
for (operation in mutate_operations){ print(operation)}
all_logger <- read_data(input_directory = "/home/ela/Documents/R-FinalExam/Muragl/")
df <- read.csv("/home/ela/Documents/R-FinalExam/Muragl/A5027A_20231006105136.csv")
df <- read.csv("/home/ela/Documents/R-FinalExam/Muragl/A5027A_20231006105136.csv", header = TRUE, comment.char = "#")
for (operation in mutate_operations){ df <- dplyr::mutate(df, !!operation)}
View(mutate_operations)
mutate_operations <- list(
Time = as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = as.Date(Time),
Julian = lubridate::yday(Time),
Month = factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = lubridate::year(Time)
)
mutate_operations <- list(
Time = as.POSIXct(ds$Time, format = "%d.%m.%Y %H:%M:%S"),
Date = as.Date(ds$Time),
Julian = lubridate::yday(ds$Time),
Month = factor(month.name[as.integer(format(ds$Time, "%m"))], levels = month.name),
Year = lubridate::year(ds$Time)
)
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S")
)
for (i in mutate_operations){}
for (i in mutate_operations){ mutated_df <- dplyr::mutate(df, operation)}
for (i in mutate_operations){ mutated_df <- dplyr::mutate(df, !!operation)}
for (i in mutate_operations){ mutated_df <- dplyr::mutate_all(df, !!operation)}
for (i in mutate_operations){ mutated_df <- dplyr::mutate_all(df, operation)}
View(mutated_df)
mutate_operations <- list(
Time = ~ as.POSIXct(Time, format = "%d.%m.%Y %H:%M:%S"),
Date = ~ as.Date(Time),
Julian = ~ lubridate::yday(Time),
Month = ~ factor(month.name[as.integer(format(Time, "%m"))], levels = month.name),
Year = ~ lubridate::year(Time)
)
for (i in mutate_operations){ mutated_df <- dplyr::mutate_all(df, operation)}
View(mutated_df)
for (i in mutate_operations){ mutated_df <- dplyr::mutate_all(df, i)}
args <- mutate_operations
args
rlang::enexpr(args)
print(rlang::enexpr(args))
print(rlang::enexpr(args))
print(str(rlang::enexpr(args)))
print(str(rlang::lang_args(args)))
test <- function(df, args){
args_call <- rlang::enexpr(args)
list_of_arg <- rlang::call_args_names(args_call)
print(list_of_arg))
test <- function(df, args){
args_call <- rlang::enexpr(args)
list_of_arg <- rlang::call_args_names(args_call)
print(list_of_arg)
}
t <- test(df, args = args)
rlang::last_trace()
devtools::document
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
library(loggeranalysis)
library(loggeranalysis)
devtools::check()
devtools::check()
library(loggeranalysis)
devtools::check()
library(loggeranalysis)
library(loggeranalysis)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(loggeranalysis)
45-18
library(loggeranalysis)
library(loggeranalysis)
library(loggeranalysis)
devtools::check()
library(loggeranalysis)
library(loggeranalysis)
library(loggeranalysis)
library(loggeranalysis)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("sf")
devtools::check()
library(loggeranalysis)
devtools::check()
getwd
getwd()
source("~/R/create_setup_file.R")
source("/home/ela/Documents/R-Projects/loggeranalysis/R/create_setup_file.R")
appeears_login <- function(){
source("/home/ela/Documents/R-Projects/loggeranalysis/R/create_setup_file.R")
api_url <- 'https://appeears.earthdatacloud.nasa.gov/api/'
secret <- jsonlite::base64_enc(gsub(' ', '', paste(gsub('login ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[2])
, gsub('password ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[3])
, sep = ":")))
print(secret)
}
test <- appears_login()
appeears_login <- function(){
source("/home/ela/Documents/R-Projects/loggeranalysis/R/create_setup_file.R")
api_url <- 'https://appeears.earthdatacloud.nasa.gov/api/'
secret <- jsonlite::base64_enc(gsub(' ', '', paste(gsub('login ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[2])
, gsub('password ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[3])
, sep = ":")))
print(secret)
}
test <- appeears_login()
appeears_login <- function(){
netrc_path <- source("/home/ela/Documents/R-Projects/loggeranalysis/R/create_setup_file.R")
netrc_lines <- readLines(netrc_path)
api_url <- 'https://appeears.earthdatacloud.nasa.gov/api/'
#login <- gsub('login', "", )
# readLines reads .netrc file
# gsub removes any spaces inside the file
# paste stores the login and password with a : inbetween
# secret <- jsonlite::base64_enc(gsub(' ', '', paste(gsub('login ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[2])
, gsub('password ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[3])
test <- appeears_login()
appeears_login <- function(){
netrc_path <- source("/home/ela/Documents/R-Projects/loggeranalysis/R/create_setup_file.R")
netrc_lines <- readLines(netrc_path)
api_url <- 'https://appeears.earthdatacloud.nasa.gov/api/'
#login <- gsub('login', "", )
# readLines reads .netrc file
# gsub removes any spaces inside the file
# paste stores the login and password with a : inbetween
# # secret <- jsonlite::base64_enc(gsub(' ', '', paste(gsub('login ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[2])
#                                                     , gsub('password ', '', readLines(file.path(Sys.getenv('HOME'), ".netrc", fsep = .Platform$file.sep))[3])
#                                                     , sep = ":")))
#
print(netrc_lines)
}
test <- appeears_login()
devtools::check()
usethis::use_package("httr")
usethis::use_package("jsonlite")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(loggeranalysis)
