else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
print(input_csv)
return(input_csv)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
input_csv <- if (!is.character(input_csv)) {
stop("`input_csv` must be a string", call. = FALSE)
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
files <- list.files(input_csv)
for (i in files){
logger_ds <- read.csv(paste0(indir,i))
}
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
input_csv <- if (!is.character(input_csv)) {
stop("`input_csv` must be a string", call. = FALSE)
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
files <- list.files(input_csv)
for (i in files){
logger_ds <- read.csv(paste0(input_csv,i))
}
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
input_csv <- if (!is.character(input_csv)) {
stop("`input_csv` must be a string", call. = FALSE)
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
logger_ds <- read.csv(paste0(input_csv))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
input_csv <- if (!is.character(input_csv)) {
stop("`input_csv` must be a string", call. = FALSE)
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
logger_ds <- read.csv(input_csv, sep = ";")
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
combined_loggerByID <- read.csv("~/Documents/R-FinalExam/packagetest/append_df/combined_loggerByID.csv")
View(combined_loggerByID)
getwd()
input_csv <- "~/R-FinalExam/packagetest/append_df/combined_loggerByID.csv"
logger_coords <- "~/R-FinalExam/Loggerpositionen_Muragl.csv"
add_coordinatesByColumn <- "Logger.ID"
inputEPSG <- "EPSG:21781"
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
input_csv <- if (!is.character(input_csv)) {
stop("`input_csv` must be a string", call. = FALSE)
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
getwd()
input_csv <- "~/Documents/R-FinalExam/packagetest/append_df/combined_loggerByID.csv"
logger_coords <- "~/Documents/R-FinalExam/Loggerpositionen_Muragl.csv"
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
input_csv <- if (!is.character(input_csv)) {
stop("`input_csv` must be a string", call. = FALSE)
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv", call. = FALSE)
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
ds <- read.csv(input_csv, sep = ";")
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
# input_csv <- if (!is.character(input_csv)) {
#   stop("`input_csv` must be a string", call. = FALSE)
# }
# else if (!file.exists(input_csv)) {
#   stop("`input_csv` does not exist: ", sQuote(input_csv), call. = FALSE)
# }
# else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
#     stop("`input_csv` must end with .csv", call. = FALSE)
#   }
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
if (!file.exists(ds)){
stop("jflsajfla")
}
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
library(utils)
library(dplyr)
library(readxl)
library(sf)
library(ggplot2)
library(rlang)
input_csv <- "~/Documents/R-FinalExam/packagetest/append_df/combined_loggerByID.csv"
logger_coords <- "~/Documents/R-FinalExam/Loggerpositionen_Muragl.csv"
add_coordinatesByColumn <- "Logger.ID"
inputEPSG <- "EPSG:21781"
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
}
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
add_coordinatesByColumn <- "Logger.ID"
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE, sep = ";")
print(head(logger_ds))
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
print(head(logger_coords))
# logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
logger_ds <- read.csv(input_csv, header = TRUE)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
print(head(logger_ds))
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
print(head(logger_coords))
# logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
# print(head(logger_ds))
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
# print(head(logger_coords))
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
output_gpkg <- "~/Documents/R-FinalExam/packagetest/spatialdata/Loggerdata_WGS1984.gpkg"
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, paste0(outdir,"loggerpositions_", inputEPSG,".gpkg", append = FALSE))
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger.sf1, crs = "+proj=longlat +datum=WGS84")
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"), append =FALSE)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
outdir <- "~/Documents/R-FinalExam/packagetest/spatialdata/"
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, paste0(outdir,"loggerpositions_", inputEPSG,".gpkg", append = FALSE))
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger.sf1, crs = "+proj=longlat +datum=WGS84")
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"), append =FALSE)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y"), crs = inputEPSG )
st_write(logger_sf, paste0(outdir,"loggerpositions_", inputEPSG,".gpkg", append = FALSE))
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"), append =FALSE)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, paste0(outdir,"loggerpositions_", inputEPSG,".gpkg"))
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions_", inputEPSG)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, paste0(filename,".gpkg"))
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
library(utils)
library(dplyr)
library(readxl)
library(sf)
library(ggplot2)
library(rlang)
input_csv <- "~/Documents/R-FinalExam/packagetest/append_df/combined_loggerByID.csv"
logger_coords <- "~/Documents/R-FinalExam/Loggerpositionen_Muragl.csv"
add_coordinatesByColumn <- "Logger.ID"
inputEPSG <- "EPSG:21781"
outdir <- "~/Documents/R-FinalExam/packagetest/spatialdata/"
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions_", inputEPSG)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, paste0(filename,".gpkg"))
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions_", inputEPSG,".gpkg")
print(filename)
#   logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
#   st_write(logger_sf, paste0(filename,".gpkg"))
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename)
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename, layer_options = "GEOMETRY=AS_XYZ", delete_layer = TRUE)
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename, delete_layer = TRUE)
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename, delete_layer = TRUE)
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger_sf, crs = outputcrs)
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"), delete_layer = TRUE)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
class()
library(loggeranalysis)
extract_date_time("~/Documents/R-FinalExam/Muragl/", "/home/ela/Documents/R-FinalExam/reordered_data/", save = FALSE)
devtools::check()
library(loggeranalysis)
library(loggeranalysis)
extract_date_time()
loggeranalysis::extract_date_time()
loggeranalysis::extract_date_time()
