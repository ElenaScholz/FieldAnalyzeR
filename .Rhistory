library(dplyr)
# function to filter quality
filter_quality <- function(data, quality_column, acceptable_qualities) {
data %>%
dplyr::filter({{ quality_column }} %in% acceptable_qualities)
}
create_subset <- function(data, columns) {
data %>%
dplyr::select({{ columns }})
}
reference_data <- read_data("/home/ela/Documents/R-Projects/loggeranalysis/inst/extdata/Referencedata/",add_ID_from_filename = FALSE )
reference_data <- read_data("data-raw/raw-data/Referencedata/",add_ID_from_filename = FALSE )
reference_data <- read_data("data-raw/raw-data/",add_ID_from_filename = FALSE )
lst <- reference_data$`example-lst-MOD11A1-061-results.csv`
ndsi <- reference_data$`example-ndsi-MOD10A1-061-results.csv`
# prepare LandSurfaceTemperature
lst_day <- lst[c("Category", "Date", "MOD11A1_061_LST_Day_1km", "MOD11A1_061_QC_Day_MODLAND")]
lst_night <- lst[c("Category", "Date", "MOD11A1_061_LST_Night_1km", "MOD11A1_061_QC_Night_MODLAND")]
ndsi <- ndsi[c("Category", "Date", "MOD10A1_061_NDSI_Snow_Cover", "MOD10A1_061_NDSI_Snow_Cover_Basic_QA_Quality_Mask_Description")]
names(ndsi) <- c("Logger_ID", "Date", "SnowCover", "Quality")
# filter out all values that are not snow related
ndsi$SnowCover[ndsi$SnowCover >= 100 ] <- NA
# filter datasets
lst_day <- dplyr::filter(lst_day, MOD11A1_061_QC_Day_MODLAND %in% c("0b00", "0b01"))
names(lst_day) <- c("Logger_ID", "Date", "Temperature_Day", "Quality")
lst_night <- dplyr::filter(lst_night, MOD11A1_061_QC_Night_MODLAND %in% c("0b00", "0b01"))
names(lst_night) <- c("Logger_ID", "Date", "Temperature_Night", "Quality")
ndsi_daily <- filter_quality(ndsi, quality_column = Quality, c("Best", "Good", "OK"))
ndsi_daily <- mutate_dates(ndsi_daily, time_column = "Date", time_format = "%Y-%m-%d")
#combine datasets and convert in daily Temperature in degree Celisius
lst_combined <- left_join(lst_day, lst_night, by = c("Logger_ID", "Date"), suffix = c("_day", "_night"))
lst_daily <- lst_combined %>% mutate(Temperature_C = ((Temperature_Day + Temperature_Night) / 2) - 273.15)
usethis::use_data(lst_daily, overwrite = TRUE)
usethis::use_data(ndsi_daily, overwrite = TRUE)
usethis::use_r("lst_daily")
usethis::use_data(lst_daily, overwrite = TRUE)
devtools::check()
devtools::check()
usethis::use_r("ndsi_daily")
devtools::check()
lst_data <- lst_daily
ndsi_data <- ndsi_daily
View(ndsi_data)
library(fastR)
library(dplyr)
# function to filter quality
filter_quality <- function(data, quality_column, acceptable_qualities) {
data %>%
dplyr::filter({{ quality_column }} %in% acceptable_qualities)
}
create_subset <- function(data, columns) {
data %>%
dplyr::select({{ columns }})
}
merge_dataframes <- function(df1, df2) {
merged_df <- merge(df1, df2, by = "Date")
return(merged_df)
}
reference_data <- read_data("data-raw/raw-data/",add_ID_from_filename = FALSE )
lst <- reference_data$`example-lst-MOD11A1-061-results.csv`
ndsi <- reference_data$`example-ndsi-MOD10A1-061-results.csv`
# prepare LandSurfaceTemperature
lst_day <- lst[c("Category", "Date", "MOD11A1_061_LST_Day_1km", "MOD11A1_061_QC_Day_MODLAND")]
lst_night <- lst[c("Category", "Date", "MOD11A1_061_LST_Night_1km", "MOD11A1_061_QC_Night_MODLAND")]
ndsi <- ndsi[c("Category", "Date", "MOD10A1_061_NDSI_Snow_Cover", "MOD10A1_061_NDSI_Snow_Cover_Basic_QA_Quality_Mask_Description")]
names(ndsi) <- c("Logger_ID", "Date", "SnowCover", "Quality")
# filter out all values that are not snow related
ndsi$SnowCover[ndsi$SnowCover >= 100 ] <- NA
# filter datasets
lst_day <- dplyr::filter(lst_day, MOD11A1_061_QC_Day_MODLAND %in% c("0b00", "0b01"))
names(lst_day) <- c("Logger_ID", "Date", "Temperature_Day", "Quality")
lst_night <- dplyr::filter(lst_night, MOD11A1_061_QC_Night_MODLAND %in% c("0b00", "0b01"))
names(lst_night) <- c("Logger_ID", "Date", "Temperature_Night", "Quality")
ndsi_daily <- filter_quality(ndsi, quality_column = Quality, c("Best", "Good", "OK"))
ndsi_daily <- mutate_dates(ndsi_daily, time_column = "Date", time_format = "%Y-%m-%d")
#combine datasets and convert in daily Temperature in degree Celisius
lst_combined <- left_join(lst_day, lst_night, by = c("Logger_ID", "Date"), suffix = c("_day", "_night"))
lst_daily <- lst_combined %>% mutate(Temperature_C = ((Temperature_Day + Temperature_Night) / 2) - 273.15)
combined_data <- merge_dataframes(ndsi_daily, lst_daily)
View(combined_data)
str(combined_data)
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- lst_combined[, c("Date", "Julian", "Month", "Year", "Logger_ID", "Temperature_C", "SnowCover")]
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- lst_combined[, c("Date", "Julian", "Month", "Year", "Logger_ID.x", "Temperature_C", "SnowCover")]
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- lst_combined[, c("Date", "Julian", "Month", "Year", "Logger_ID.x", "Temperature_C", "SnowCover")]
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- lst_combined[, c("Date", "Julian", "Month", "Year", "Logger_ID.y", "Temperature_C", "SnowCover")]
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- lst_combined[, c("Date", "Logger_ID.x","Julian", "Month", "Year", "Temperature_C", "SnowCover")]
View(combined_data)
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- create_subset <- function(combined_data, columns= c("Date", "Logger_ID.x", "SnowCover", "Julian", "Month", "Year", "Temperature_C")) {
data %>%
dplyr::select({{ columns }})
}
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- create_subset <- function(combined_data, columns= c("Date", "Logger_ID.x", "SnowCover", "Julian", "Month", "Year", "Temperature_C"))
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- create_subset(combined_data, columns= c("Date", "Logger_ID.x", "SnowCover", "Julian", "Month", "Year", "Temperature_C"))
combined_data <- merge_dataframes(ndsi_daily, lst_daily)
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- create_subset(combined_data, columns= c("Date", "Logger_ID.x", "SnowCover", "Julian", "Month", "Year", "Temperature_C"))
# Subset the dataset to keep only the desired variables
lst_ndsi_subset <- # Subset the dataset to keep only the desired variables
lst_ndsi_subset <- combined_data[, c("Date", "Logger_ID.x", "SnowCover", "Julian", "Month", "Year", "Temperature_C")]
lst_ndsi_subset <- combined_data %>%
select(Date, Logger_ID.x, SnowCover, Julian, Month, Year, Temperature_C) %>%
rename(Logger_ID = Logger_ID.x)
View(lst_ndsi_subset)
lst_ndsi_subset <- combined_data %>%
select(Date, Logger_ID.x, SnowCover, Julian, Month, Year, Temperature_C) %>%
rename(Logger_ID = Logger_ID.x,
LST_C = Temperature_C)
usethis::use_data(lst_ndsi_subset, overwrite = TRUE)
usethis::use_r("lst_ndsi_subset")
devtools::check()
devtools::check()
devtools::check()
library(fastR)
devtools::build_readme()
library(fastR)
input_directory <- system.file("extdata/Logger/", package = "fastR")
### 1. Read in the Datasets with the function "read_data"
# for the given example datasets, the ID can be added from the filename.
raw_data <- read_data(input_directory = input_directory, csv_sep = ",",
csv_comment_character = "#",
add_ID_from_filename = TRUE,
index_id = c(0, 6)
)
# take a look at the structure of raw_data and one dataset
str(raw_data)
### 2. Rename the columns to make the Analysis easier
sample_data <- rename_columns(raw_data,
rename_map = list(Number = "No",
Logger_ID = "Logger.ID",
Time = "Time",
Temperature_C  = "X1.oC",
Battery_Voltage = "HK.Bat.V"))
### 3. Date Conversion
# for further analysis it is necessary to have the Date converted to the type         "Date". Therefore check if the format of the Time Column.
sample_data <- mutate_dates(sample_data, time_column = "Time",
time_format = "%d.%m.%Y %H:%M")
head(sample_data)
daily_temperature <- aggregate_data(sample_data, aggregation_type = "daily", temperature_column = "Temperature_C")
monthly_temperature <- aggregate_data(sample_data, aggregation_type = "monthly", temperature_column = "Temperature_C")
# generate simple plots to see the developement of the temperature over time
daily_temp_plot <- ggplot2::ggplot(daily_temperature, ggplot2::aes(x = Julian, y = mean_temperature)) +
ggplot2::geom_line(color = '#6bd2db', linewidth = 1) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank()) +
ggplot2::ggtitle("Development of temperature for Julian Date") +
ggplot2::facet_wrap(~Year) +
ggplot2::labs(subtitle = paste("Logger ID:", unique(daily_temperature$Logger_ID)))
daily_temp_plot
monthly_temp_plot <- ggplot2::ggplot(monthly_temperature, ggplot2::aes(Year, mean_temperature, colour = Month)) +
ggplot2::geom_point(size = 0.5) +
ggplot2::geom_smooth() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = ggplot2::element_blank(),
legend.position = "none") +
ggplot2::labs(x = "Year",
y = "Mean Temperature") +
ggplot2::facet_wrap(~Month) +
ggplot2::ggtitle("Development of temperature per Month")
monthly_temp_plot
preprocessed_referencedata <- lst_ndsi_subset
head(preprocessed_referencedata)
all_data <- merge(preprocessed_referencedata, daily_temperature)
all_data <- merge(preprocessed_referencedata, daily_temperature, by = "Date")
preprocessed_referencedata <- lst_ndsi_subset
# merge with field temperature data
all_data <- merge(preprocessed_referencedata, daily_temperature, by = "Date")
plot <- ggplot(all_data, aes(x = Julian.x, y=mean_temperature))+
geom_line(aes(y = mean_temperature), show.legend = TRUE)+
geom_point(aes(y = SnowCover))+
scale_y_continuous(
name = "Mean Temperature",
sec.axis = sec_axis(trans = ~.*0.3, name = "Snow Coverage"))+
facet_wrap(~Year.x)
preprocessed_referencedata <- lst_ndsi_subset
# merge with field temperature data
all_data <- merge(preprocessed_referencedata, daily_temperature, by = "Date")
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~.*0.3, name = "Snow Coverage"))+
ggplot2::facet_wrap(~Year.x)
plot
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~.*0.1, name = "Snow Coverage"))+
ggplot2::facet_wrap(~Year.x)
plot
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~.*0.1, name = "Snow Coverage", breaks = waiver()))+
ggplot2::facet_wrap(~Year.x)
plot
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~.*0.1, name = "Snow Coverage",
breaks = ggplot2::waiver()))+
ggplot2::facet_wrap(~Year.x)
plot
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(name = "Snow Coverage",
breaks = ggplot2::waiver()))+
ggplot2::facet_wrap(~Year.x)
plot
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~.*0.1, name = "Snow Coverage", breaks = ggplot2::waiver()))+
ggplot2::facet_wrap(~Year.x)
plot
plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y=mean_temperature))+
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), show.legend = TRUE)+
#ggplot2::geom_point(ggplot2::aes(y = SnowCover))+
ggplot2::scale_y_continuous(
name = "Mean Temperature")#,
# sec.axis = ggplot2::sec_axis(trans = ~.*0.1, name = "Snow Coverage", breaks = ggplot2::waiver()))+
ggplot2::facet_wrap(~Year.x)
daily_plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian, y = mean_temperature)) +
ggplot2::geom_line(color = '#6bd2db', linewidth = 1) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank()) +
ggplot2::ggtitle("Development of temperature for Julian Date") +
ggplot2::facet_wrap(~Year) +
ggplot2::labs(subtitle = paste("Logger ID:", unique(daily_temperature$Logger_ID)))
daily_plot
preprocessed_referencedata
all_data
head(all_data)
all_data <- merge(preprocessed_referencedata, daily_temperature, by = "Date")
all_data <- all_data[, c("Date", "Logger_ID.x", "SnowCover", "Julian.x", "Month.x", "Year.x", "LST_C", "mean_temperature")]
all_data <- all_data %>%
rename(Logger_ID = "Logger_ID.x",
Julian = "Julian.x",
Month = "Month.x",
Year = "Year.x")
all_data <- all_data %>%
dplyr::rename(Logger_ID = "Logger_ID.x",
Julian = "Julian.x",
Month = "Month.x",
Year = "Year.x")
head(all_data)
daily_plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian, y = mean_temperature)) +
ggplot2::geom_line(color = '#6bd2db', linewidth = 1) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank()) +
ggplot2::ggtitle("Development of temperature for Julian Date") +
ggplot2::facet_wrap(~Year) +
ggplot2::labs(subtitle = paste("Logger ID:", unique(daily_temperature$Logger_ID)))
daily_plot
daily_plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y = mean_temperature)) +
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
ggplot2::geom_point(ggplot2::aes(y = SnowCover), color = "red", size = 2) +  # Adding points for SnowCover
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank()) +
ggplot2::ggtitle("Development of temperature for Julian Date") +
ggplot2::facet_wrap(~ Year.x) +
ggplot2::labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~ . * 10, name = "Snow Cover")
)
daily_plot
daily_plot <- ggplot2::ggplot(all_data, ggplot2::aes(x = Julian.x, y = mean_temperature)) +
ggplot2::geom_line(ggplot2::aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
ggplot2::geom_point(ggplot2::aes(y = SnowCover), color = "red", size = 2) +  # Adding points for SnowCover
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank()) +
ggplot2::ggtitle("Development of temperature for Julian Date") +
ggplot2::facet_wrap(~ Year) +
ggplot2::labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
ggplot2::scale_y_continuous(
name = "Mean Temperature",
sec.axis = ggplot2::sec_axis(trans = ~ . * 10, name = "Snow Cover")
)
daily_plot
preprocessed_referencedata <- lst_ndsi_subset
ibrary(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
field_plot <- ggplot(daily_temperature,
aes(x = Julian,
y = mean_temperature))+
geom_line(color="#69b3a2", linewidth = 1)+
ggtitle("Daily Temperature Developement (°C)")+
theme_ipsum()+
facet_wrap(~Year)
library(ggplot2)
field_plot <- ggplot(daily_temperature,
aes(x = Julian,
y = mean_temperature))+
geom_line(color="#69b3a2", linewidth = 1)+
ggtitle("Daily Temperature Developement (°C)")+
theme_ipsum()+
facet_wrap(~Year)
field_plot
field_plot <- ggplot(daily_temperature,
aes(x = Julian,
y = mean_temperature))+
geom_line(color="#69b3a2", linewidth = 1)+
ggtitle("Daily Temperature Developement (°C)")+
theme_ipsum()
field_plot
field_plot <- ggplot(daily_temperature,
aes(x = Julian,
y = mean_temperature))+
geom_line(color="#69b3a2", linewidth = 1)+
ggtitle("Daily Temperature Developement (°C)")+
facet_wrap(~Year)+
theme_ipsum()
field_plot
snow_cover <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = SnowCover))+
geom_point(color = 'grey', size = 1)+
ggtitle("Daily Snow Coverage (%)")+
facet_wrap(~Year)
snow_cover <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = SnowCover))+
geom_point(color = 'grey', size = 1)+
ggtitle("Daily Snow Coverage (%)")+
facet_wrap(~Year)+
theme_ipsum()
snow_cover
field_plot <- ggplot(daily_temperature,
aes(x = Julian,
y = mean_temperature))+
geom_line(color="#69b3a2", linewidth = 1)+
ggtitle("Daily Temperature Developement (°C)")+
facet_wrap(~Year)
snow_cover <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = SnowCover))+
geom_point(color = 'grey', size = 1)+
ggtitle("Daily Snow Coverage (%)")+
facet_wrap(~Year)
field_plot
snow_cover
field_plot+snow_cover
lst_plot <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = LST_C))+
geom_line(color="#69b3f4", linewidth = 1)+
ggtitle("Daily Land Surface Temperature Developement (°C)")+
facet_wrap(~Year)
field_plot+snow_cover+lst_plot
daily_plot1 <- ggplot(all_data, aes(x = Julian, y = mean_temperature)) +
geom_line(aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
geom_point(aes(y = SnowCover), color = "red", size = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Development of temperature for Julian Date") +
facet_wrap(~ Year) +
labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
scale_y_percent(name = "Mean Temperature", sec.axis = sec_axis(~ . / 10, name = "Snow Cover"))
daily_plot1
daily_plot1 <- ggplot(all_data, aes(x = Julian, y = mean_temperature)) +
geom_line(aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
geom_point(aes(y = SnowCover), color = "red", size = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Development of temperature for Julian Date") +
facet_wrap(~ Year) +
labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
scale_y_percent(name = "Mean Temperature", sec.axis = sec_axis(name = "Snow Cover"))
daily_plot1 <- ggplot(all_data, aes(x = Julian, y = mean_temperature)) +
geom_line(aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
geom_point(aes(y = SnowCover), color = "red", size = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Development of temperature for Julian Date") +
facet_wrap(~ Year) +
labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
scale_y_percent(name = "Mean Temperature", sec.axis = sec_axis(~ . / 10, name = "Snow Cover"))
daily_plot1
daily_plot1 <- ggplot(all_data, aes(x = Julian, y = mean_temperature)) +
geom_line(aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
geom_point(aes(y = SnowCover), color = "red", size = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Development of temperature for Julian Date") +
facet_wrap(~ Year) +
labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
scale_y_continuous(name = "Mean Temperature",
sec.axis = sec_axis(~ . /0, name = "Snow Cover"))
daily_plot1
daily_plot1 <- ggplot(all_data, aes(x = Julian, y = mean_temperature)) +
geom_line(aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
geom_point(aes(y = SnowCover), color = "red", size = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Development of temperature for Julian Date") +
facet_wrap(~ Year) +
labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
scale_y_continuous(name = "Mean Temperature",
sec.axis = sec_axis(~ . *0, name = "Snow Cover"))
daily_plot1
daily_plot1 <- ggplot(all_data, aes(x = Julian, y = mean_temperature)) +
geom_line(aes(y = mean_temperature), color = '#6bd2db', linewidth = 1) +
geom_point(aes(y = SnowCover), color = "red", size = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggtitle("Development of temperature for Julian Date") +
facet_wrap(~ Year) +
labs(subtitle = paste("Logger ID:", unique(all_data$Logger_ID.x))) +
scale_y_continuous(name = "Mean Temperature",
sec.axis = sec_axis(~ . *1, name = "Snow Cover"))
daily_plot1
field_plot+snow_cover
lst_plot <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = LST_C))+
geom_line(color="#69b3f4", linewidth = 1)+
ggtitle("Daily Land Surface Temperature Developement (°C)")+
facet_wrap(~Year)
field_plot+snow_cover+plot_layout(guides = "collect")
combined_plots <- field_plot+snow_cover+plot_layout(guides = "collect")
combined_plots
plot_grid(
field_plot + theme(strip.text.x = element_blank()),  # Remove x-axis labels for temperature plot
snow_cover + theme(strip.text.x = element_blank()),  # Remove x-axis labels for snow cover plot
lst_plot + theme(strip.text.x = element_blank()),    # Remove x-axis labels for LST plot
ncol = 1                                            # Arrange plots in one column
)
cowplot::plot_grid(
field_plot + theme(strip.text.x = element_blank()),  # Remove x-axis labels for temperature plot
snow_cover + theme(strip.text.x = element_blank()),  # Remove x-axis labels for snow cover plot
lst_plot + theme(strip.text.x = element_blank()),    # Remove x-axis labels for LST plot
ncol = 1                                            # Arrange plots in one column
)
cowplot::plot_grid(
field_plot + theme(strip.text.x = element_blank()),  # Remove x-axis labels for temperature plot
snow_cover + theme(strip.text.x = element_blank()),  # Remove x-axis labels for snow cover                                            # Arrange plots in one column
)
cowplot::plot_grid(
field_plot + theme(strip.text.x = element_blank()),  # Remove x-axis labels for temperature plot
snow_cover + theme(strip.text.x = element_blank())  # Remove x-axis labels for snow cover                                            # Arrange plots in one column
)
snow_cover <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = SnowCover))+
geom_point(color = 'grey', size = 1)+
ggtitle("Daily Snow Coverage (%)")+
facet_wrap(~Year)+
ylim(0,100)
combined_plots <- field_plot+snow_cover+plot_layout(guides = "collect")
combined_plots
field_plot <- ggplot(daily_temperature,
aes(x = Julian,
y = mean_temperature))+
geom_line(color="#69b3a2", linewidth = 1)+
ggtitle("Daily Temperature")+
facet_wrap(~Year)+
labs(x = "Julian Date", y = "Temperature °C")  # Adding labels to the axes
snow_cover <- ggplot(preprocessed_referencedata,
aes(x = Julian,
y = SnowCover))+
geom_point(color = 'grey', size = 1)+
ggtitle("Daily Snow Coverage")+
facet_wrap(~Year)+
ylim(0,100)+
labs(x = "Julian Date", y = "Snow Coverage (%)")  # Adding labels to the axes
field_plot+snow_cover+plot_layout(guides = "collect")
devtools::check()
devtools::check()
