logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, paste0(filename,".gpkg"))
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions_", inputEPSG,".gpkg")
print(filename)
#   logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
#   st_write(logger_sf, paste0(filename,".gpkg"))
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename)
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename, layer_options = "GEOMETRY=AS_XYZ", delete_layer = TRUE)
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
#
# wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
# st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename, delete_layer = TRUE)
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger_addcoords, crs = outputcrs)
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"))
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
loggerToSpatial <- function(input_csv, logger_coords, outdir, add_coordinatesByColumn, inputEPSG, outputcrs = "+proj=longlat +datum=WGS84", write = TRUE){
if (!is.character(input_csv)) {
stop("`input_csv` must be a string")
}
else if (!file.exists(input_csv)) {
stop("`input_csv` does not exist: ", sQuote(input_csv))
}
else if(substr(input_csv, nchar(input_csv) - 3, nchar(input_csv)) != ".csv") {
stop("`input_csv` must end with .csv")
}
logger_ds <- read.csv(input_csv, header = TRUE)
logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
filename <- paste0(outdir, "loggerpositions",".gpkg")
print(filename)
logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
st_write(logger_sf, filename, delete_layer = TRUE)
crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
wgs_coords <- st_transform(logger_sf, crs = outputcrs)
st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"), delete_layer = TRUE)
}
loggerToSpatial(input_csv = input_csv, logger_coords = logger_coords, outdir = outdir, add_coordinatesByColumn = add_coordinatesByColumn, inputEPSG = inputEPSG)
class()
library(loggeranalysis)
extract_date_time("~/Documents/R-FinalExam/Muragl/", "/home/ela/Documents/R-FinalExam/reordered_data/", save = FALSE)
devtools::check()
library(loggeranalysis)
library(loggeranalysis)
extract_date_time()
loggeranalysis::extract_date_time()
loggeranalysis::extract_date_time()
load(helperFunctions.R)
load("helperFunctions.R")
load("helperFunctions.R")
getwd()
load("R/helperFunctions.R")
devtools::check()
library(loggeranalysis)
extract_date_time("~/Documents/R-FinalExam/Muragl/", "/home/ela/Documents/R-FinalExam/reordered_data/", save = FALSE)
loggeranalysis::extract_date_time("~/Documents/R-FinalExam/Muragl/", "/home/ela/Documents/R-FinalExam/reordered_data/", save = FALSE)
devtools::check()
devtools::check()
library(loggeranalysis)
extract_date_time()
extract_date_time()
devtools::check()
getwd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(loggeranalysis)
library(loggeranalysis)
devtools::check()
loggeranalysis::extract_date_time("~/Documents/R-FinalExam/Muragl/", "~/Documents/R-FinalExam/reordered_data/", save = TRUE, csv_sep = ",")
loggeranalysis::extract_date_time("~/Documents/R-FinalExam/Muragl/", "~/Documents/R-FinalExam/packagetest/reorder/", save = TRUE, csv_sep = ",")
wanings()
warnings()
devtools::check()
loggeranalysis::extract_date_time("~/Documents/R-FinalExam/Muragl/", "~/Documents/R-FinalExam/packagetest/reorder/", save = TRUE, csv_sep = ",")
loggeranalysis::add_idadd_id("~/Documents/R-FinalExam/packagetest/reorder/", "~/Documents/R-FinalExam/packagetest/append_df/", save = TRUE)
loggeranalysis::add_id("~/Documents/R-FinalExam/packagetest/reorder/", "~/Documents/R-FinalExam/packagetest/append_df/", save = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(loggeranalysis)
getwd()
input1 <- "/home/ela/Documents/R-FinalExam/Loggerpositionen_Muragl.csv"
input2 <- "/home/ela/Documents/R-FinalExam/Loggerpositionen_Muragl.xlsx"
check_format <- function(input){
print(file_ext(input1))
}
check_format <- function(input){
print(file_ext(input))
}
check_format(input1)
check_format(input2)
library(tools)
check_format <- function(input){
print(file_ext(input))
}
check_format(input1)
check_format(input2)
input3 <- c(2.1,3.5,6)
check_format(input3)
check_format <- function(input){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input)
}
else if (extention == "xslx"){
dataframe <- read.xlsx(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input1)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input)
}
else if (extention == "xslx"){
dataframe <- read.xlsx(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input1, csv_sep = ";")
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extention == "xslx"){
dataframe <- read.xlsx(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input1, csv_sep = ";")
check_format(input2)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xslx"){
dataframe <- read.xlsx(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input1, csv_sep = ";")
check_format(input2)
library(readxl)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xslx"){
dataframe <- read.xlsx(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input2)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xlsx"){
dataframe <- read.xlsx(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input2)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xlsx"){
dataframe <- read_excel(input)
}
else if (extension == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input2)
check_format(input3)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xlsx"){
dataframe <- read_excel(input)
}
else if (input == is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input3)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xlsx"){
dataframe <- read_excel(input)
}
else if (is.list(input)){
dataframe <- as.data.frame(input)
} else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input3)
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xlsx"){
dataframe <- read_excel(input)
}
} else{
check_format <- function(input, csv_sep = ","){
extension <- file_ext(input)
if (extension == "csv"){
dataframe <- read.csv(input, sep = csv_sep)
}
else if (extension == "xlsx"){
dataframe <- read_excel(input)
}
else{
stop("Unsupported file format or input type.")
}
return(dataframe)
}
check_format(input2)
usethis::use_package("tools")
usethis::use_package("readxl")
library(utils)
library(dplyr)
library(readxl)
library(sf)
library(ggplot2)
library(rlang)
input_csv <- "~/Documents/R-FinalExam/packagetest/append_df/combined_loggerByID.csv"
logger_coords <- "~/Documents/R-FinalExam/Loggerpositionen_Muragl.csv"
add_coordinatesByColumn <- "Logger.ID"
inputEPSG <- "EPSG:21781"
outdir <- "~/Documents/R-FinalExam/packagetest/spatialdata/Muragl_"
loggerToSpatial <- function(in_file, csv_sep = ",", logger_coordinates , out_dir = NULL, add_coordinates_By_Column, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", write = FALSE, create_shapefile = TRUE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(in_file)
if (is.character(out_dir)){
check_path(out_dir)
}
logger_df <- check_format(in_file)
print(head(logger_df))
# logger_ds <- read.csv(input_csv, header = TRUE)
# logger_coords <- read.csv(logger_coords, header = TRUE, sep = ";")
# logger_addcoords <- merge(logger_ds, logger_coords, by = add_coordinatesByColumn)
#
#
# filename <- paste0(outdir, "loggerpositions",".gpkg")
#
# print(filename)
# logger_sf <- st_as_sf(logger_addcoords, coords = c("X", "Y", "Z"), crs = inputEPSG )
#
#
# crs <- substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs))
# wgs_coords <- st_transform(logger_sf, crs = outputcrs)
#
# if (write == TRUE){
#   st_write(logger_sf, filename, delete_layer = TRUE)
#   st_write(wgs_coords, paste0(outdir, "loggerpositions_", crs, ".gpkg"), delete_layer = TRUE)
# }
#
# return(logger_sf = logger_sf, wgs_coords=wgs_coords)
}
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = NULL, add_coordinates_By_Column = add_coordinatesByColumn, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", write = FALSE, create_shapefile = TRUE)
loggerToSpatial <- function(in_file, csv_sep = ",", logger_coordinates , out_dir = NULL, add_coordinates_By_Column, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = FALSE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(in_file)
if (is.character(out_dir)){
check_path(out_dir)
}
check_save(save, out_dir)
# checking input file format and read input file for logger data and the input coordinates as a dataframe
logger_df <- check_format(in_file)
coordinates <- check_format(logger_coordinates)
# merges coordinates for each logger-dataset to the logger_df dataframe and saves it, if save = TRUE
logger_df <- merge(logger_df, coordinates, by = add_coordinatesByColumn)
# if (save){
#   if (file.exists(paste0(out_dir, "logger_geodata.csv"))){
#     print(paste("Csv_File exists"))}
#   else{write.csv(logger_df, file = paste0(out_dir,"logger_geodata.csv"), row.names = FALSE , sep = ",") }}
# create gpkg files for the original and the given output coordinate system
logger_as_sf <- st_as_sf(logger_df, coords = c("X", "Y", "Z"), crs = input_EPSG)
logger_sf_wgs84 <- st_transform(logger_as_sf, crs = output_crs)
filename1 <- paste0("Logger_geodata_", input_EPSG,".gpkg")
filename2 <- paste0("logger_geodata_", substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs)), ".gpkg")
if (save){
st_write(logger_as_sf, paste0(out_dir,filename1), delete_layer = TRUE)
st_write(wgs_coords, paste0(outdir, filename2), delete_layer = TRUE)
}
return(logger_as_sf = logger_as_sf, logger_sf_wgs84 = logger_sf_wgs84, logger_df = logger_df)
}
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = NULL, add_coordinates_By_Column = add_coordinatesByColumn, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = TRUE)
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = "~/Documents/R-FinalExam/packagetest/spatialdata/Muragl_", add_coordinates_By_Column = add_coordinatesByColumn, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = TRUE)
loggerToSpatial <- function(in_file, csv_sep = ",", logger_coordinates , out_dir = NULL, add_coordinates_By_Column, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = FALSE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(in_file)
check_save(save, out_dir)
# checking input file format and read input file for logger data and the input coordinates as a dataframe
logger_df <- check_format(in_file)
coordinates <- check_format(logger_coordinates)
# merges coordinates for each logger-dataset to the logger_df dataframe and saves it, if save = TRUE
logger_df <- merge(logger_df, coordinates, by = add_coordinatesByColumn)
# if (save){
#   if (file.exists(paste0(out_dir, "logger_geodata.csv"))){
#     print(paste("Csv_File exists"))}
#   else{write.csv(logger_df, file = paste0(out_dir,"logger_geodata.csv"), row.names = FALSE , sep = ",") }}
# create gpkg files for the original and the given output coordinate system
logger_as_sf <- st_as_sf(logger_df, coords = c("X", "Y", "Z"), crs = input_EPSG)
logger_sf_wgs84 <- st_transform(logger_as_sf, crs = output_crs)
filename1 <- paste0("Logger_geodata_", input_EPSG,".gpkg")
filename2 <- paste0("logger_geodata_", substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs)), ".gpkg")
if (save){
st_write(logger_as_sf, paste0(out_dir,filename1), delete_layer = TRUE)
st_write(wgs_coords, paste0(outdir, filename2), delete_layer = TRUE)
}
return(logger_as_sf = logger_as_sf, logger_sf_wgs84 = logger_sf_wgs84, logger_df = logger_df)
}
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = "~/Documents/R-FinalExam/packagetest/spatialdata/Muragl_", add_coordinates_By_Column = add_coordinatesByColumn, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = TRUE)
loggerToSpatial <- function(in_file, csv_sep = ",", logger_coordinates , out_dir = NULL, add_coordinates_By_Column, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = FALSE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(in_file)
check_file(logger_coordinates)
check_save(save, out_dir)
# checking input file format and read input file for logger data and the input coordinates as a dataframe
logger_df <- check_format(in_file)
coordinates <- check_format(logger_coordinates)
# merges coordinates for each logger-dataset to the logger_df dataframe and saves it, if save = TRUE
logger_df <- merge(logger_df, coordinates, by = add_coordinatesByColumn)
# if (save){
#   if (file.exists(paste0(out_dir, "logger_geodata.csv"))){
#     print(paste("Csv_File exists"))}
#   else{write.csv(logger_df, file = paste0(out_dir,"logger_geodata.csv"), row.names = FALSE , sep = ",") }}
# create gpkg files for the original and the given output coordinate system
logger_as_sf <- st_as_sf(logger_df, coords = c("X", "Y", "Z"), crs = input_EPSG)
logger_sf_wgs84 <- st_transform(logger_as_sf, crs = output_crs)
filename1 <- paste0("Logger_geodata_", input_EPSG,".gpkg")
filename2 <- paste0("logger_geodata_", substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs)), ".gpkg")
if (save){
st_write(logger_as_sf, paste0(out_dir,filename1), delete_layer = TRUE)
st_write(wgs_coords, paste0(outdir, filename2), delete_layer = TRUE)
}
return(logger_as_sf = logger_as_sf, logger_sf_wgs84 = logger_sf_wgs84, logger_df = logger_df)
}
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = "~/Documents/R-FinalExam/packagetest/spatialdata/Muragl_", add_coordinates_By_Column = add_coordinatesByColumn, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = TRUE)
outdir <- "/home/ela/Documents/R-FinalExam/packagetest/spatialdata/"
loggerToSpatial <- function(in_file, csv_sep = ",", logger_coordinates , out_dir = NULL, add_coordinates_By_Column, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = FALSE){
source("~/Documents/R-Projects/loggeranalysis/R/helperFunctions.R")
check_file(in_file)
check_file(logger_coordinates)
check_save(save, out_dir)
# checking input file format and read input file for logger data and the input coordinates as a dataframe
logger_df <- check_format(in_file)
coordinates <- check_format(logger_coordinates)
# merges coordinates for each logger-dataset to the logger_df dataframe and saves it, if save = TRUE
logger_df <- merge(logger_df, coordinates, by = add_coordinatesByColumn)
# if (save){
#   if (file.exists(paste0(out_dir, "logger_geodata.csv"))){
#     print(paste("Csv_File exists"))}
#   else{write.csv(logger_df, file = paste0(out_dir,"logger_geodata.csv"), row.names = FALSE , sep = ",") }}
# create gpkg files for the original and the given output coordinate system
logger_as_sf <- st_as_sf(logger_df, coords = c("X", "Y", "Z"), crs = input_EPSG)
logger_sf_wgs84 <- st_transform(logger_as_sf, crs = output_crs)
filename1 <- paste0("Logger_geodata_", input_EPSG,".gpkg")
filename2 <- paste0("logger_geodata_", substr(outputcrs, nchar(outputcrs) - 5, nchar(outputcrs)), ".gpkg")
if (save){
st_write(logger_as_sf, paste0(out_dir,filename1), delete_layer = TRUE)
st_write(wgs_coords, paste0(outdir, filename2), delete_layer = TRUE)
}
return(logger_as_sf = logger_as_sf, logger_sf_wgs84 = logger_sf_wgs84, logger_df = logger_df)
}
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = outdir, add_coordinates_By_Column = add_coordinatesByColumn, input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = TRUE)
loggerToSpatial(in_file = input_csv, logger_coordinates = logger_coords , out_dir = outdir, add_coordinates_By_Column = 'Logger.ID', input_EPSG, output_crs = "+proj=longlat +datum=WGS84", save = TRUE)
library(readxl)
Loggerpositionen_Muragl <- read_excel("~/Documents/R-FinalExam/Loggerpositionen_Muragl.xlsx")
View(Loggerpositionen_Muragl)
